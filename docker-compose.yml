version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: tracking_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-tracking_system}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - tracking_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicação principal
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: tracking_app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-tracking_system}
      SESSION_SECRET: ${SESSION_SECRET}
    # Porta exposta apenas se não usar Nginx
    # Em produção com Nginx, comente a linha abaixo
    ports:
      - "${APP_PORT:-3000}:5000"
    networks:
      - tracking_network
    volumes:
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: tracking_nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - tracking_network

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  tracking_network:
    driver: bridge